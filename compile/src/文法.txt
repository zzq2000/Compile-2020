＜程序＞::=［＜常量说明＞］［＜变量说明＞］{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
＜常量说明＞::=const＜常量定义＞;{const＜常量定义＞;}
＜常量定义＞::=int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞}|char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
＜标识符＞::=＜字母＞｛＜字母＞｜＜数字＞｝//标识符和保留字都不区分大小写，比如if和IF均为保留字，不允许出现与保留字相同的标识符
＜整数＞::=［＋｜－］＜无符号整数＞
＜无符号整数＞::=＜数字＞｛＜数字＞｝
＜字母＞::=＿｜a｜．．．｜z｜A｜．．．｜Z
＜数字＞::=０｜１｜．．．｜９

＜变量说明＞::=＜变量定义＞;{＜变量定义＞;}
＜变量定义＞::=＜变量定义无初始化＞|＜变量定义及初始化＞
//变量包括简单变量、一维、二维数组，＜无符号整数＞表示数组各维元素的个数，其值需大于0，数组元素按行优先存储
//变量没有初始化的情况下没有初值
＜变量定义无初始化＞::=＜类型标识符＞(＜标识符＞|＜标识符＞'['＜无符号整数＞']'|
						＜标识符＞'['＜无符号整数＞']''['＜无符号整数＞']'){,(＜标识符＞|＜标识符＞'['＜无符号整数＞']'|＜标识符＞'['＜无符号整数＞']''['＜无符号整数＞']')}
＜变量定义及初始化＞::=＜类型标识符＞＜标识符＞=＜常量＞|＜类型标识符＞＜标识符＞'['＜无符号整数＞']'='{'＜常量＞{,＜常量＞}'}'|
						＜类型标识符＞＜标识符＞'['＜无符号整数＞']''['＜无符号整数＞']'='{''{'＜常量＞{,＜常量＞}'}'{,'{'＜常量＞{,＜常量＞}'}'}'}'
//简单变量、一维、二维数组均可在声明的时候赋初值，＜无符号整数＞表示数组各维元素的个数，其值需大于0，数组元素按行优先存储，＜常量＞的类型应与＜类型标识符＞完全一致，否则报错；每维初值的个数与该维元素个数一致，否则报错，无缺省值；
＜类型标识符＞::=int|char
＜常量＞::=＜整数＞|＜字符＞
＜字符＞::='＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
＜加法运算符＞::=+｜-
＜乘法运算符＞::=*｜/

＜有返回值函数定义＞::=＜声明头部＞'('＜参数表＞')''{'＜复合语句＞'}'
＜无返回值函数定义＞::=void＜标识符＞'('＜参数表＞')''{'＜复合语句＞'}'
＜声明头部＞::=int＜标识符＞|char＜标识符＞
＜参数表＞::=＜类型标识符＞＜标识符＞{,＜类型标识符＞＜标识符＞}|＜空＞

＜主函数＞::=void main ‘(’‘)’ ‘{’＜复合语句＞‘}’
＜复合语句＞::=［＜常量说明＞］［＜变量说明＞］＜语句列＞
＜语句列＞::=｛＜语句＞｝
＜语句＞::=＜循环语句＞｜＜条件语句＞|＜有返回值函数调用语句＞;|＜无返回值函数调用语句＞;｜＜赋值语句＞;｜＜读语句＞;｜
			＜写语句＞;｜＜情况语句＞｜＜空＞;|＜返回语句＞;|'{'＜语句列＞'}'
＜循环语句＞::=while'('＜条件＞')'＜语句＞|
				for'('＜标识符＞＝＜表达式＞;＜条件＞;＜标识符＞＝＜标识符＞(+|-)＜步长＞')'＜语句＞
//for语句先进行条件判断，符合条件再进入循环体
＜步长＞::=＜无符号整数＞

＜条件语句＞::=if'('＜条件＞')'＜语句＞［else＜语句＞］
＜条件＞::=＜表达式＞＜关系运算符＞＜表达式＞
//表达式需均为整数类型才能进行比较
＜关系运算符＞::= <｜<=｜>｜>=｜!=｜==

＜有返回值函数调用语句＞::=＜标识符＞'('＜值参数表＞')'
＜无返回值函数调用语句＞::=＜标识符＞'('＜值参数表＞')'
//函数调用时，只能调用在之前已经定义过的函数，对是否有返回值的函数都是如此
＜值参数表＞::=＜表达式＞{,＜表达式＞}｜＜空＞
//实参的表达式不能是数组名，可以是数组元素
//实参的计算顺序,要求生成的目标码运行结果与Clang8.0.0编译器运行的结果一致

＜赋值语句＞::=＜标识符＞＝＜表达式＞|＜标识符＞'['＜表达式＞']'=＜表达式＞|
							＜标识符＞'['＜表达式＞']''['＜表达式＞']'=＜表达式＞
//＜标识符＞＝＜表达式＞中的<标识符>不能为常量名和数组名

＜读语句＞::=scanf'('＜标识符＞')'
//从标准输入获取<标识符>的值，该标识符不能是常量名和数组名
//生成的PCODE或MIPS汇编在运行时，对每一个scanf语句，无论标识符的类型是char还是int，末尾均需回车；在testin.txt文件中的输入数据也是每项在一行
//生成MIPS汇编时按照syscall指令的用法使用

＜写语句＞::=printf'('＜字符串＞,＜表达式＞')'|printf'('＜字符串＞')'|printf'('＜表达式＞')'
//printf'('＜字符串＞,＜表达式＞')'输出时，先输出字符串的内容，再输出表达式的值，两者之间无空格
//表达式为字符型时，输出字符；为整型时输出整数
//＜字符串＞原样输出（不存在转义）
//每个printf语句的内容输出到一行，按结尾有换行符\n处理
＜字符串＞::="｛十进制编码为32,33,35-126的ASCII字符｝"//字符串中要求至少有一个字符

＜情况语句＞::=switch‘(’＜表达式＞‘)’‘{’＜情况表＞＜缺省＞‘}’
＜情况表＞::=＜情况子语句＞{＜情况子语句＞}
＜情况子语句＞::=case＜常量＞：＜语句＞
＜缺省＞::=default:＜语句＞
//情况语句中，switch后面的表达式和case后面的常量只允许出现int和char类型；每个情况子语句执行完毕后，不继续执行后面的情况子语句

＜返回语句＞::=return['('＜表达式＞')']
//无返回值的函数中可以没有return语句，也可以有形如return;的语句
//有返回值的函数只要出现一条带返回值的return语句（表达式带小括号）即可，不用检查每个分支是否有带返回值的return语句

＜表达式＞::=［＋｜－］＜项＞{＜加法运算符＞＜项＞}//[+|-]只作用于第一个<项>
＜项＞::=＜因子＞{＜乘法运算符＞＜因子＞}
＜因子＞::=＜标识符＞｜＜标识符＞'['＜表达式＞']'|＜标识符＞'['＜表达式＞']''['＜表达式＞']'|'('＜表达式＞')'｜
			＜整数＞|＜字符＞｜＜有返回值函数调用语句＞
//char类型的变量或常量，用字符的ASCII码对应的整数参加运算
//＜标识符＞'['＜表达式＞']'和＜标识符＞'['＜表达式＞']''['＜表达式＞']'中的＜表达式＞只能是整型，下标从0开始
//单个＜标识符＞不包括数组名，即数组不能整体参加运算，数组元素可以参加运算


































